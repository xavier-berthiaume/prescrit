// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: prescrit_interface.capnp

#include "prescrit_interface.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<30> b_b88ac5584f59652e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     46, 101,  89,  79,  88, 197, 138, 184,
     25,   0,   0,   0,   3,   0,   0,   0,
     40, 119, 188, 224, 216,  89, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  71,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 101, 115,  99, 114, 105, 116,
     95, 105, 110, 116, 101, 114, 102,  97,
     99, 101,  46,  99,  97, 112, 110, 112,
     58,  80, 114, 101, 115,  99, 114, 105,
    116,  67, 111, 114, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     66, 220,  37,  93,  92,   0, 185, 178,
    164,  67, 214,  85,  94, 130, 152, 234,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    101,  99, 104, 111,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b88ac5584f59652e = b_b88ac5584f59652e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b88ac5584f59652e[] = {
  &s_b2b9005c5d25dc42,
  &s_ea98825e55d643a4,
};
static const uint16_t m_b88ac5584f59652e[] = {0};
const ::capnp::_::RawSchema s_b88ac5584f59652e = {
  0xb88ac5584f59652e, b_b88ac5584f59652e.words, 30, d_b88ac5584f59652e, m_b88ac5584f59652e,
  2, 1, nullptr, nullptr, nullptr, { &s_b88ac5584f59652e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_b2b9005c5d25dc42 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     66, 220,  37,  93,  92,   0, 185, 178,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 101, 115,  99, 114, 105, 116,
     95, 105, 110, 116, 101, 114, 102,  97,
     99, 101,  46,  99,  97, 112, 110, 112,
     58,  80, 114, 101, 115,  99, 114, 105,
    116,  67, 111, 114, 101,  46, 101,  99,
    104, 111,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b2b9005c5d25dc42 = b_b2b9005c5d25dc42.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b2b9005c5d25dc42 = {
  0xb2b9005c5d25dc42, b_b2b9005c5d25dc42.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b2b9005c5d25dc42, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_ea98825e55d643a4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    164,  67, 214,  85,  94, 130, 152, 234,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 101, 115,  99, 114, 105, 116,
     95, 105, 110, 116, 101, 114, 102,  97,
     99, 101,  46,  99,  97, 112, 110, 112,
     58,  80, 114, 101, 115,  99, 114, 105,
    116,  67, 111, 114, 101,  46, 101,  99,
    104, 111,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ea98825e55d643a4 = b_ea98825e55d643a4.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ea98825e55d643a4 = {
  0xea98825e55d643a4, b_ea98825e55d643a4.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ea98825e55d643a4, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::PrescritCore::EchoParams,  ::PrescritCore::EchoResults>
PrescritCore::Client::echoRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::PrescritCore::EchoParams,  ::PrescritCore::EchoResults>(
      0xb88ac5584f59652eull, 0, sizeHint, {true});
}
::kj::Promise<void> PrescritCore::Server::echo(EchoContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "prescrit_interface.capnp:PrescritCore", "echo",
      0xb88ac5584f59652eull, 0);
}
::capnp::Capability::Server::DispatchCallResult PrescritCore::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb88ac5584f59652eull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("prescrit_interface.capnp:PrescritCore", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult PrescritCore::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        echo(::capnp::Capability::Server::internalGetTypedContext<
             ::PrescritCore::EchoParams,  ::PrescritCore::EchoResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "prescrit_interface.capnp:PrescritCore",
          0xb88ac5584f59652eull, methodId);
  }
}
#endif  // !CAPNP_LITE

// PrescritCore
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PrescritCore::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PrescritCore::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// PrescritCore::EchoParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t PrescritCore::EchoParams::_capnpPrivate::dataWordSize;
constexpr uint16_t PrescritCore::EchoParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PrescritCore::EchoParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PrescritCore::EchoParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// PrescritCore::EchoResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t PrescritCore::EchoResults::_capnpPrivate::dataWordSize;
constexpr uint16_t PrescritCore::EchoResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PrescritCore::EchoResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PrescritCore::EchoResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



