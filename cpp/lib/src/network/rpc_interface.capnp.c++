// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: rpc_interface.capnp

#include <prescrit/network/rpc_interface.capnp.h> 

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<31> b_9c351cbb8e9d330d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     13,  51, 157, 142, 187,  28,  53, 156,
     20,   0,   0,   0,   3,   0,   0,   0,
    179,  26,  38,   4,   0,  87,  97, 242,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  71,   0,   0,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  95, 105, 110, 116, 101,
    114, 102,  97,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  82, 112,  99,  73,
    110, 116, 101, 114, 102,  97,  99, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133, 180, 254, 125,  86,  43, 126, 240,
     18, 205, 208,   0, 241, 162,  79, 223,
     17,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    115,  97, 121,  72, 101, 108, 108, 111,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_9c351cbb8e9d330d = b_9c351cbb8e9d330d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9c351cbb8e9d330d[] = {
  &s_df4fa2f100d0cd12,
  &s_f07e2b567dfeb485,
};
static const uint16_t m_9c351cbb8e9d330d[] = {0};
const ::capnp::_::RawSchema s_9c351cbb8e9d330d = {
  0x9c351cbb8e9d330d, b_9c351cbb8e9d330d.words, 31, d_9c351cbb8e9d330d, m_9c351cbb8e9d330d,
  2, 1, nullptr, nullptr, nullptr, { &s_9c351cbb8e9d330d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_f07e2b567dfeb485 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    133, 180, 254, 125,  86,  43, 126, 240,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  95, 105, 110, 116, 101,
    114, 102,  97,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  82, 112,  99,  73,
    110, 116, 101, 114, 102,  97,  99, 101,
     46, 115,  97, 121,  72, 101, 108, 108,
    111,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f07e2b567dfeb485 = b_f07e2b567dfeb485.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f07e2b567dfeb485 = {
  0xf07e2b567dfeb485, b_f07e2b567dfeb485.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f07e2b567dfeb485, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_df4fa2f100d0cd12 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     18, 205, 208,   0, 241, 162,  79, 223,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  95, 105, 110, 116, 101,
    114, 102,  97,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  82, 112,  99,  73,
    110, 116, 101, 114, 102,  97,  99, 101,
     46, 115,  97, 121,  72, 101, 108, 108,
    111,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    116, 101, 120, 116,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_df4fa2f100d0cd12 = b_df4fa2f100d0cd12.words;
#if !CAPNP_LITE
static const uint16_t m_df4fa2f100d0cd12[] = {0};
static const uint16_t i_df4fa2f100d0cd12[] = {0};
const ::capnp::_::RawSchema s_df4fa2f100d0cd12 = {
  0xdf4fa2f100d0cd12, b_df4fa2f100d0cd12.words, 35, nullptr, m_df4fa2f100d0cd12,
  0, 1, i_df4fa2f100d0cd12, nullptr, nullptr, { &s_df4fa2f100d0cd12, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::RpcInterface::SayHelloParams,  ::RpcInterface::SayHelloResults>
RpcInterface::Client::sayHelloRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::RpcInterface::SayHelloParams,  ::RpcInterface::SayHelloResults>(
      0x9c351cbb8e9d330dull, 0, sizeHint);
}
::kj::Promise<void> RpcInterface::Server::sayHello(SayHelloContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "rpc_interface.capnp:RpcInterface", "sayHello",
      0x9c351cbb8e9d330dull, 0);
}
::capnp::Capability::Server::DispatchCallResult RpcInterface::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x9c351cbb8e9d330dull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("rpc_interface.capnp:RpcInterface", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult RpcInterface::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        sayHello(::capnp::Capability::Server::internalGetTypedContext<
             ::RpcInterface::SayHelloParams,  ::RpcInterface::SayHelloResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "rpc_interface.capnp:RpcInterface",
          0x9c351cbb8e9d330dull, methodId);
  }
}
#endif  // !CAPNP_LITE

// RpcInterface
#if !CAPNP_LITE
constexpr ::capnp::Kind RpcInterface::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RpcInterface::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// RpcInterface::SayHelloParams
constexpr uint16_t RpcInterface::SayHelloParams::_capnpPrivate::dataWordSize;
constexpr uint16_t RpcInterface::SayHelloParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RpcInterface::SayHelloParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RpcInterface::SayHelloParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// RpcInterface::SayHelloResults
constexpr uint16_t RpcInterface::SayHelloResults::_capnpPrivate::dataWordSize;
constexpr uint16_t RpcInterface::SayHelloResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind RpcInterface::SayHelloResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RpcInterface::SayHelloResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



