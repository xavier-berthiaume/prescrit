// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: rpc_interface.capnp

#include <prescrit/network/rpc_interface.capnp.h>

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<33> b_d5fbccc1d3a34b1e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     30,  75, 163, 211, 193, 204, 251, 213,
     20,   0,   0,   0,   1,   0,   0,   0,
    179,  26,  38,   4,   0,  87,  97, 242,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  95, 105, 110, 116, 101,
    114, 102,  97,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  72, 105,  77, 115,
    103,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d5fbccc1d3a34b1e = b_d5fbccc1d3a34b1e.words;
#if !CAPNP_LITE
static const uint16_t m_d5fbccc1d3a34b1e[] = {0};
static const uint16_t i_d5fbccc1d3a34b1e[] = {0};
const ::capnp::_::RawSchema s_d5fbccc1d3a34b1e = {
  0xd5fbccc1d3a34b1e, b_d5fbccc1d3a34b1e.words, 33, nullptr, m_d5fbccc1d3a34b1e,
  0, 1, i_d5fbccc1d3a34b1e, nullptr, nullptr, { &s_d5fbccc1d3a34b1e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_9a9df4b8102476b9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    185, 118,  36,  16, 184, 244, 157, 154,
     20,   0,   0,   0,   1,   0,   0,   0,
    179,  26,  38,   4,   0,  87,  97, 242,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  95, 105, 110, 116, 101,
    114, 102,  97,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  72, 101, 108, 108,
    111,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    103, 114, 101, 101, 116, 105, 110, 103,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9a9df4b8102476b9 = b_9a9df4b8102476b9.words;
#if !CAPNP_LITE
static const uint16_t m_9a9df4b8102476b9[] = {0};
static const uint16_t i_9a9df4b8102476b9[] = {0};
const ::capnp::_::RawSchema s_9a9df4b8102476b9 = {
  0x9a9df4b8102476b9, b_9a9df4b8102476b9.words, 35, nullptr, m_9a9df4b8102476b9,
  0, 1, i_9a9df4b8102476b9, nullptr, nullptr, { &s_9a9df4b8102476b9, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_a1e681bf80d50fa2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    162,  15, 213, 128, 191, 129, 230, 161,
     20,   0,   0,   0,   3,   0,   0,   0,
    179,  26,  38,   4,   0,  87,  97, 242,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  95, 105, 110, 116, 101,
    114, 102,  97,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  82, 112,  99,  83,
    101, 114, 118, 105,  99, 101,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    162, 214,  38, 234,  76,  32, 255, 166,
     66,  45, 178,  90,  65, 112, 116, 141,
     17,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    104, 101, 108, 108, 111,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_a1e681bf80d50fa2 = b_a1e681bf80d50fa2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a1e681bf80d50fa2[] = {
  &s_8d7470415ab22d42,
  &s_a6ff204cea26d6a2,
};
static const uint16_t m_a1e681bf80d50fa2[] = {0};
const ::capnp::_::RawSchema s_a1e681bf80d50fa2 = {
  0xa1e681bf80d50fa2, b_a1e681bf80d50fa2.words, 29, d_a1e681bf80d50fa2, m_a1e681bf80d50fa2,
  2, 1, nullptr, nullptr, nullptr, { &s_a1e681bf80d50fa2, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a6ff204cea26d6a2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    162, 214,  38, 234,  76,  32, 255, 166,
     31,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  95, 105, 110, 116, 101,
    114, 102,  97,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  82, 112,  99,  83,
    101, 114, 118, 105,  99, 101,  46, 104,
    101, 108, 108, 111,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     30,  75, 163, 211, 193, 204, 251, 213,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a6ff204cea26d6a2 = b_a6ff204cea26d6a2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a6ff204cea26d6a2[] = {
  &s_d5fbccc1d3a34b1e,
};
static const uint16_t m_a6ff204cea26d6a2[] = {0};
static const uint16_t i_a6ff204cea26d6a2[] = {0};
const ::capnp::_::RawSchema s_a6ff204cea26d6a2 = {
  0xa6ff204cea26d6a2, b_a6ff204cea26d6a2.words, 34, d_a6ff204cea26d6a2, m_a6ff204cea26d6a2,
  1, 1, i_a6ff204cea26d6a2, nullptr, nullptr, { &s_a6ff204cea26d6a2, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8d7470415ab22d42 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     66,  45, 178,  90,  65, 112, 116, 141,
     31,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  95, 105, 110, 116, 101,
    114, 102,  97,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  82, 112,  99,  83,
    101, 114, 118, 105,  99, 101,  46, 104,
    101, 108, 108, 111,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    185, 118,  36,  16, 184, 244, 157, 154,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8d7470415ab22d42 = b_8d7470415ab22d42.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8d7470415ab22d42[] = {
  &s_9a9df4b8102476b9,
};
static const uint16_t m_8d7470415ab22d42[] = {0};
static const uint16_t i_8d7470415ab22d42[] = {0};
const ::capnp::_::RawSchema s_8d7470415ab22d42 = {
  0x8d7470415ab22d42, b_8d7470415ab22d42.words, 35, d_8d7470415ab22d42, m_8d7470415ab22d42,
  1, 1, i_8d7470415ab22d42, nullptr, nullptr, { &s_8d7470415ab22d42, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// HiMsg
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HiMsg::_capnpPrivate::dataWordSize;
constexpr uint16_t HiMsg::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HiMsg::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HiMsg::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HelloResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HelloResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HelloResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HelloResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HelloResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::RpcService::HelloParams,  ::RpcService::HelloResults>
RpcService::Client::helloRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::RpcService::HelloParams,  ::RpcService::HelloResults>(
      0xa1e681bf80d50fa2ull, 0, sizeHint, {true});
}
::kj::Promise<void> RpcService::Server::hello(HelloContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "rpc_interface.capnp:RpcService", "hello",
      0xa1e681bf80d50fa2ull, 0);
}
::capnp::Capability::Server::DispatchCallResult RpcService::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xa1e681bf80d50fa2ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("rpc_interface.capnp:RpcService", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult RpcService::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        hello(::capnp::Capability::Server::internalGetTypedContext<
             ::RpcService::HelloParams,  ::RpcService::HelloResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "rpc_interface.capnp:RpcService",
          0xa1e681bf80d50fa2ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// RpcService
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RpcService::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RpcService::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RpcService::HelloParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RpcService::HelloParams::_capnpPrivate::dataWordSize;
constexpr uint16_t RpcService::HelloParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RpcService::HelloParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RpcService::HelloParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RpcService::HelloResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RpcService::HelloResults::_capnpPrivate::dataWordSize;
constexpr uint16_t RpcService::HelloResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RpcService::HelloResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RpcService::HelloResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



